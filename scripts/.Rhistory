#first prepare the design matrix and all possible contrasts
##design matrix
group <- targets$MF.Grade
group <- factor(group)
design <- model.matrix(~0 + group)
colnames(design) <- paste("Grade_",levels(group), sep = "")
##Voom
v.DEGList.filtered.norm <- voom(myDGEList.filtered.norm, design, plot = T)
fit <- lmFit(v.DEGList.filtered.norm, design)
contrast.matrix <-makeContrasts( Grade_1vs0 = Grade_1 - Grade_0,
Grade_2vs0 = Grade_2 - Grade_0,
Grade_3vs0 = Grade_3 - Grade_0,
Grade_2vs1 = Grade_2 - Grade_1,
Grade_3vs1 = Grade_3 - Grade_1,
Grade_3vs2 = Grade_3 - Grade_2,
levels=design)
fits <- contrasts.fit(fit, contrast.matrix)
ebFit <- eBayes(fits)
results <- decideTests(ebFit, method="global", adjust.method="BH", p.value=0.05, lfc=2)
colnames(v.DEGList.filtered.norm$E) <- targets$MF.Grade
diffGenes <- v.DEGList.filtered.norm$E[results[,1] !=0 | results[,2] !=0 | results[,3] !=0 | results[,4] !=0 | results[,5] !=0 | results[,6] !=0, ]
dim(diffGenes)
#622  16
targets$Number
colnames(v.DEGList.filtered.norm$E) <- targets$Number
myDGEList.filtered.norm <- calcNormFactors(myDGEList.filtered, method = "TMM")
## Raw counts table
EVs_counts <- as.data.frame(
read_delim("/Volumes/home/Data analysis/Rebekka_BMF_microvesicles-master/Limma_analysis/data/Raw/counts.txt",
"\t", escape_double = FALSE, trim_ws = TRUE))
row.names(EVs_counts) <- EVs_counts$...1
EVs_counts <- EVs_counts[,-1]
#first check of the raw data
plot(log10(colSums(EVs_counts)) ) #remove EV_20 qnd EV539
EVs_counts <- EVs_counts[,!(names(EVs_counts) %in% c("EV_20","EV_539"))]
EVs_counts <- EVs_counts[rowMeans(EVs_counts) > 75 ,]
targets <- as.data.frame(read_excel("/Volumes/home/Data analysis/Rebekka_BMF_microvesicles-master/Limma_analysis/support/Info Vesicles RNA seq.xlsx"))
targets <- targets[targets$Number %in% names(EVs_counts),]
targets <- targets[order(targets$`MF-Grade`),]
EVs_counts <- EVs_counts[,targets$Number]
#remove the healthy control samples from tragets and EVs
targets<- na.omit(targets)
EVs_counts<- EVs_counts[,-c(17:25)]
# capture sample labels from the study design file that you worked with and saved as 'targets' in step 1
sampleLabels <- targets$Number
# Make a DGElist from your counts
myDGEList <- DGEList(EVs_counts)
# Extract the cpm matrix
cpm <- cpm(myDGEList)
# Generate summary stats for your data ----
cpm.stats <- transform(cpm,
SD=rowSds(cpm),
AVG=rowMeans(cpm),
MED=rowMedians(cpm))
# generate a scatter plot to know what are the sperated cluster of genes
# Change data rownames as a real column called 'Gene_ID'
cpm.stats <- cpm.stats %>%
rownames_to_column(var="Gene_ID")
ggplot(cpm.stats) +
aes(x = SD, y = MED, label=Gene_ID) +
geom_point(shape=16, size=2) +
geom_text_repel(data=cpm.stats %>% filter(MED>5000))+
labs(y="Median", x = "Standard deviation",
title="Count per million (CPM)")+
theme_classic() +
theme_dark()+
theme_bw()
#convert to log2
colSums(cpm)
log2.cpm <- cpm(myDGEList, log=TRUE)
#convert the matrix to dataframe by coercing to apply tydiverse
log2.cpm.df <- as_tibble(log2.cpm, rownames = "geneID")
log2.cpm.df
#prepare the dataframe for ggplot by pivoting
# use the tidy package to 'pivot' your dataframe (from wide to long)
log2.cpm.df.pivot <- pivot_longer(log2.cpm.df, # dataframe to be pivoted
cols = EV_26:EV_423, # column names to be stored as a SINGLE variable
names_to = "samples", # name of that new variable (column)
values_to = "expression") # name of new variable (column) storing all the values (data)
ggplot(log2.cpm.df.pivot) +
aes(x=samples, y=expression, fill=samples) +
geom_violin(trim = FALSE, show.legend = FALSE) +
stat_summary(fun = "median",
geom = "point",
shape = 95,
size = 10,
color = "black",
show.legend = FALSE) +
labs(y="log2 expression", x = "sample",
title="Log2 Counts per Million (CPM)",
subtitle="unfiltered, non-normalized",
caption=paste0("produced on ", Sys.time())) +
theme_bw()
# Filter your data ----
#first, take a look at how many genes or transcripts have no read counts at all
table(rowSums(myDGEList$counts==0)==16)
#FALSE  TRUE
#11633     1 --> only one gene thanks to fiteration of m=>75 rowmean
# Be sure to adjust this cutoff for the number of samples in the smallest group of comparison.
keepers <- rowSums(cpm>1)>=5
dim(myDGEList)
#11633    16
myDGEList.filtered <- myDGEList[keepers,]
dim(myDGEList.filtered)
#11514    16 --> 120 genes have an expression of ZERO in 3 samples so I removed them
#prepare the dataframe to for ggplot
log2.cpm.filtered <- cpm(myDGEList.filtered, log=TRUE)
log2.cpm.filtered.df <- as_tibble(log2.cpm.filtered, rownames = "geneID")
# pivot this FILTERED data, just as you did earlier
log2.cpm.filtered.df.pivot <- pivot_longer(log2.cpm.filtered.df, # dataframe to be pivoted
cols = EV_26:EV_418, # column names to be stored as a SINGLE variable
names_to = "samples", # name of that new variable (column)
values_to = "expression") # name of new variable (column) storing all the values (data)
#plot
ggplot(log2.cpm.filtered.df.pivot) +
aes(x=samples, y=expression, fill=samples) +
geom_violin(trim = FALSE, show.legend = FALSE) +
stat_summary(fun = "median",
geom = "point",
shape = 95,
size = 10,
color = "black",
show.legend = FALSE) +
labs(y="log2 expression", x = "sample",
title="Log2 Counts per Million (CPM)",
subtitle="filtered, non-normalized",
caption=paste0("produced on ", Sys.time())) +
theme_bw()
myDGEList.filtered.norm <- calcNormFactors(myDGEList.filtered, method = "TMM")
# use the 'cpm' function from EdgeR to get counts per million from your normalized data
log2.cpm.filtered.norm <- cpm(myDGEList.filtered.norm, log=TRUE)
log2.cpm.filtered.norm.df <- as_tibble(log2.cpm.filtered.norm, rownames = "geneID")
# pivot this NORMALIZED data, just as you did earlier
log2.cpm.filtered.norm.df.pivot <- pivot_longer(log2.cpm.filtered.norm.df, # dataframe to be pivoted
cols = EV_26:EV_423, # column names to be stored as a SINGLE variable
names_to = "samples", # name of that new variable (column)
values_to = "expression") # name of new variable (column) storing all the values
ggplot(log2.cpm.filtered.norm.df.pivot) +
aes(x=samples, y=expression, fill=samples) +
geom_violin(trim = FALSE, show.legend = FALSE) +
stat_summary(fun = "median",
geom = "point",
shape = 95,
size = 10,
color = "black",
show.legend = FALSE) +
labs(y="log2 expression", x = "sample",
title="Log2 Counts per Million (CPM)",
subtitle="filtered, TMM normalized",
caption=paste0("produced on ", Sys.time())) +
theme_bw()
pca.res <- prcomp(t(log2.cpm.filtered.norm), scale.=F, retx=T)
pc.var <- pca.res$sdev^2
pc.per <- round(pc.var/sum(pc.var)*100, 1)
pca.res.df <- as.data.frame(pca.res$x)
group <- targets$`MF-Grade`
group <- factor(group)
pca.plot<- ggplot(pca.res.df) +
aes(x=PC1, y=PC2, label= sampleLabels, color = group) +
geom_point(size=4) +
xlab(paste0("PC1 (",pc.per[1],"%",")")) +
ylab(paste0("PC3 (",pc.per[3],"%",")")) +
labs(title="PCA plot",
caption=paste0("produced on ", Sys.time())) +
coord_fixed() +
theme_bw()
ggplotly(pca.plot)
#normal PCA plot
ggplot(pca.res.df) +
aes(x=PC1, y=PC2, label= sampleLabels, color = group) +
geom_point(size=4) +
xlab(paste0("PC1 (",pc.per[1],"%",")")) +
ylab(paste0("PC3 (",pc.per[3],"%",")")) +
labs(title="PCA plot",
caption=paste0("produced on ", Sys.time())) +
geom_text(color= "black")+
coord_fixed() +
theme_bw()
log2.cpm.filtered.norm.df_1 <- as.data.frame(log2.cpm.filtered.norm)
log2.cpm.filtered.norm.df_1$gene = row.names(log2.cpm.filtered.norm.df_1)
d = log2.cpm.filtered.norm.df_1 %>% gather(log2.cpm.filtered.norm.df_1, Expression, -gene)
d$group = c(rep("0", 11697), rep("1", 11697), rep("2", 11697), rep("3", 11697))
View(d)
d$group = c(rep("0", 5*11697), rep("1", 3*11697), rep("2", 3*11697), rep("3", 5*11697))
View(log2.cpm.filtered.df)
d$group = c(rep("0", 5*11079), rep("1", 3*11079), rep("2", 3*11079), rep("3", 5*11079))
geneOfInterest = d %>% filter(gene == 'YAP1')
geneOfInterest %>%
ggplot( aes(x=group, y=Expression, fill= group)) +
geom_boxplot(width=0.1, color="grey", alpha=0.2) +
geom_point()+
theme( text = element_text(size = 20),
legend.position="none",
plot.title = element_text(size=20)
) + ggtitle("Log2 Counts per Million (XBP1)")+
xlab("")
geneOfInterest = d %>% filter(gene == 'CLEC5A')
geneOfInterest %>%
ggplot( aes(x=group, y=Expression, fill= group)) +
geom_boxplot(width=0.1, color="grey", alpha=0.2) +
geom_point()+
theme( text = element_text(size = 20),
legend.position="none",
plot.title = element_text(size=20)
) + ggtitle("Log2 Counts per Million (XBP1)")+
xlab("")
geneOfInterest = d %>% filter(gene == 'RUNX1')
geneOfInterest %>%
ggplot( aes(x=group, y=Expression, fill= group)) +
geom_boxplot(width=0.1, color="grey", alpha=0.2) +
geom_point()+
theme( text = element_text(size = 20),
legend.position="none",
plot.title = element_text(size=20)
) + ggtitle("Log2 Counts per Million (XBP1)")+
xlab("")
geneOfInterest %>%
ggplot( aes(x=group, y=Expression, fill= group)) +
geom_boxplot(width=0.1, color="grey", alpha=0.2) +
geom_point()+
theme( text = element_text(size = 20),
legend.position="none",
plot.title = element_text(size=20)
) + ggtitle("Log2 Counts per Million (RUNX1)")+
xlab("")+theme_bw()
geneOfInterest = d %>% filter(gene == 'RUNX2')
geneOfInterest %>%
ggplot( aes(x=group, y=Expression, fill= group)) +
geom_boxplot(width=0.1, color="grey", alpha=0.2) +
geom_point()+
theme( text = element_text(size = 20),
legend.position="none",
plot.title = element_text(size=20)
) + ggtitle("Log2 Counts per Million (RUNX2)")+
xlab("")+theme_bw()
geneOfInterest %>%
ggplot( aes(x=group, y=Expression, fill= group)) +
geom_boxplot(width=0.1, color="black", alpha=0.2) +
geom_point()+
theme( text = element_text(size = 20),
legend.position="none",
plot.title = element_text(size=20)
) + ggtitle("Log2 Counts per Million (RUNX2)")+
xlab("")+theme_bw()
Gene_XYZ = "RUNX1"
geneOfInterest = d %>% filter(gene = Gene_XYZ)
geneOfInterest %>%
geneOfInterest = d %>% filter(gene == Gene_XYZ)
geneOfInterest = d %>% filter(gene = c(Gene_XYZ))
Gene_XYZ = c("RUNX1")
geneOfInterest = d %>% filter(gene = Gene_XYZ)
geneOfInterest = d %>% filter(gene == Gene_XYZ)
geneOfInterest %>%
geneOfInterest %>%
ggplot( aes(x=group, y=Expression, fill= group)) +
geom_boxplot(width=0.1, color="black", alpha=0.2) +
geom_point()+
theme( text = element_text(size = 20),
legend.position="none",
plot.title = element_text(size=20)
) + ggtitle(paste0("Log2 Counts per Million (", Gene_XYZ,")"))+
xlab("")+theme_bw()
geneOfInterest %>%
ggplot( aes(x=group, y=Expression, fill= group)) +
geom_boxplot(width=0.1, color="black", alpha=0.2) +
geom_point()+
theme( text = element_text(size = 20),
legend.position="none",
plot.title = element_text(size=20)
) + ggtitle(paste0("Log2 Counts per Million (", Gene_XYZ,")"))+
xlab("")+theme_bw()
geneOfInterest %>%
ggplot( aes(x=group, y=Expression, fill= group)) +
geom_boxplot(width=0.1, color="black", alpha=0.2) +
geom_point()+
theme( text = element_text(size = 20),
legend.position="none",
plot.title = element_text(size=20)
) + ggtitle(paste0("Log2 Counts per Million (", Gene_XYZ,")"))+
xlab("")+theme_bw()
Gene_XYZ = c("CLEC5A")
geneOfInterest = d %>% filter(gene == Gene_XYZ)
geneOfInterest %>%
ggplot( aes(x=group, y=Expression, fill= group)) +
geom_boxplot(width=0.1, color="black", alpha=0.2) +
geom_point()+
theme( text = element_text(size = 20),
legend.position="none",
plot.title = element_text(size=20)
) + ggtitle(paste0("Log2 Counts per Million (", Gene_XYZ,")"))+
xlab("")+theme_bw()
geneOfInterest %>%
ggplot( aes(x=group, y=Expression, fill= group)) +
geom_boxplot(width=0.1, color="black", alpha=0.2) +
geom_point()+
theme( text = element_text(size = 20),
legend.position="none",
plot.title = element_text(size=20)
) + ggtitle(paste0("Log2 Counts per Million (", Gene_XYZ,")"))+
xlab("")+theme_bw()
knitr::opts_chunk$set(dev = c("pdf", "png", "tiff"), dpi = 300,echo = TRUE)
# create 'bubble plot' to summarize y signatures across x phenotypes
pdf("/Volumes/home/Data analysis/Rebekka_BMF_microvesicles-master/Limma_analysis/scripts/04_GSEA_dotplot_Cytoscape-fgsea_script_files/figure-html/Grade_2vsPre.pdf", width=7, height=7)
par(oma=c(1,1,1,10))
ggplot(myGSEA.df_1[c(60, 75, 83, 84, 86, 104, 113, 123 , 132, 237),], aes(x=NES, y=reorder(pathway_3,NES))) +
geom_point(aes(size=setSize, color = NES, alpha=-log10(p.adjust))) +
scale_color_gradient(low="blue", high="red") +
labs(title="GSEA_Grade_2vsPrefibrosis_Merge(Grade_0&Grade_1)") +
xlab("NES") +
ylab(NULL) +theme_bw()+
theme(plot.title = element_text(hjust = 1))
dev.off()
#Main libraries
library(readr)
library(vsn)
#Support functions also requires
library(ggplot2)
library(reshape)
library(pheatmap)
library(gridExtra)
library(grid)
library(cowplot)
library(ggrepel)
library(hexbin)
library(readr)
library(limma)
library(readxl)
library(tidyverse)
library(edgeR)
library(matrixStats)
library(cowplot)
library(dplyr)
library(tibble)
library(tidyverse)
library(DT)
library(gt)
library(plotly)
library(RColorBrewer)
library(gplots)
library(GSEABase) #functions and methods for Gene Set Enrichment Analysis
library(Biobase) #base functions for bioconductor; required by GSEABase
library(GSVA) #Gene Set Variation Analysis, a non-parametric and unsupervised method for estimating variation of gene set enrichment across samples.
library(clusterProfiler) # provides a suite of tools for functional enrichment analysis
library(msigdbr) # access to msigdb collections directly within R
library(enrichplot) # great for making the standard GSEA enrichment plots
source("/Volumes/home/Data analysis/Rebekka_BMF_microvesicles-master/Limma_analysis/support/support_functions.R")
#first: Grade_2vsPrefibrosis_Merging_(Grade_0&Grade_1)
Grade_2vspre <- as.data.frame(read.csv("/Volumes/home/Data analysis/Rebekka_BMF_microvesicles-master/Limma_analysis/analysis/DGE/myTopHits.df_Grade_2vspre.csv"))
##targets
targets <- as.data.frame(read.csv("/Volumes/home/Data analysis/Rebekka_BMF_microvesicles-master/Limma_analysis/support/filtered_targets.csv"))
row.names(targets) <- targets$X
targets <- targets[,-1]
# Exclude the 5 samples of Grade_3
#for target
targets_sub_1<- targets[1:11,]
targets_sub_1<-mutate(targets_sub_1, Adv_Pre= ifelse(MF.Grade >= 2, "ADV_Grade_2","Merg_Grade_0and_1"))
#prp. of design matrix
group <- targets_sub_1$Adv_Pre
group <- factor(group)
design <- model.matrix(~0 + group)
colnames(design) <- paste(c("ADV_Grade_2","Merg_Grade_0and_1"))
contrast.matrix_sub_1 <-makeContrasts(Grade_2vsMerg_Grade_0_and_1 = ADV_Grade_2-Merg_Grade_0and_1,
levels=design)
#import the gmt
broadSet.C2.ALL <- read.gmt("/Volumes/home/Data analysis/Rebekka_BMF_microvesicles-master/Limma_analysis/analysis/GSEA/fgsea_Bader-lab/Cytoscape_input/Human_GOBP_AllPathways_no_GO_iea_July_01_2021_symbol.gmt")
#broadSet.C2.ALL <- geneIds(broadSet.C2.ALL)
#Extract the name of each pathway and then add another column to the gene that are corresponding to that dataset
d1 <- data.frame(GeneID=sapply(broadSet.C2.ALL, toString), stringsAsFactors=FALSE)
d1$Pathway_name<- rownames(d1)
mydata.df.sub <- dplyr::select(Grade_2vspre, geneID, logFC)
# construct a named vector
mydata.gsea <- mydata.df.sub$logFC
names(mydata.gsea) <- as.character(mydata.df.sub$geneID)
mydata.gsea <- sort(mydata.gsea, decreasing = TRUE)
myGSEA.res <- GSEA(mydata.gsea, TERM2GENE=broadSet.C2.ALL, verbose=FALSE)
myGSEA.df <- as_tibble(myGSEA.res@result)
myGSEA.df_1 <- myGSEA.df %>%
mutate(phenotype = case_when(
NES > 0 ~ "ADV_Grade_2",
NES < 0 ~ "Merg_Grade_0and_1"))
#prepare pathway names
myGSEA.df_1$pathway <-sapply(strsplit(myGSEA.df_1$ID,split =  "%", fixed = T), function(x) x[1])
myGSEA.df_1$pathway_2 <-sapply(strsplit(myGSEA.df_1$ID,split =  "%", fixed = T), function(x) x[2])
myGSEA.df_1$pathway_3 <-paste0(myGSEA.df_1$pathway,"_" ,myGSEA.df_1$pathway_2)
myGSEA.df_1<-myGSEA.df_1[!duplicated(myGSEA.df_1$pathway_3), ]
myGSEA.df_1 <- myGSEA.df_1 %>% arrange(desc(NES))
# create 'bubble plot' to summarize y signatures across x phenotypes
pdf("/Volumes/home/Data analysis/Rebekka_BMF_microvesicles-master/Limma_analysis/scripts/04_GSEA_dotplot_Cytoscape-fgsea_script_files/figure-html/Grade_2vsPre.pdf", width=7, height=7)
par(oma=c(1,1,1,10))
ggplot(myGSEA.df_1[c(60, 75, 83, 84, 86, 104, 113, 123 , 132, 237),], aes(x=NES, y=reorder(pathway_3,NES))) +
geom_point(aes(size=setSize, color = NES, alpha=-log10(p.adjust))) +
scale_color_gradient(low="blue", high="red") +
labs(title="GSEA_Grade_2vsPrefibrosis_Merge(Grade_0&Grade_1)") +
xlab("NES") +
ylab(NULL) +theme_bw()+
theme(plot.title = element_text(hjust = 1))
dev.off()
pdf("/Volumes/home/Data analysis/Rebekka_BMF_microvesicles-master/Limma_analysis/scripts/04_GSEA_dotplot_Cytoscape-fgsea_script_files/figure-html/Grade_2vsPre.pdf", width=7, height=7)
par(oma=c(1,1,1,10))
ggplot(myGSEA.df_1[c(60, 75, 83, 84, 86, 104, 113, 123 , 132, 237),], aes(x=NES, y=reorder(pathway_3,NES))) +
geom_point(aes(size=setSize, color = NES, alpha=-log10(p.adjust))) +
scale_color_gradient(low="blue", high="red") +
labs(title="GSEA_Grade_2vsPrefibrosis_Merge(Grade_0&Grade_1)") +
xlab("NES") +
ylab(NULL) +theme_bw()+
theme(plot.title = element_text(hjust = 1))
dev.off()
pdf("/Volumes/home/Data analysis/Rebekka_BMF_microvesicles-master/Limma_analysis/scripts/04_GSEA_dotplot_Cytoscape-fgsea_script_files/figure-html/Grade_2vsPre.pdf", width=20, height=5)
par(oma=c(1,1,1,10))
ggplot(myGSEA.df_1[c(60, 75, 83, 84, 86, 104, 113, 123 , 132, 237),], aes(x=NES, y=reorder(pathway_3,NES))) +
geom_point(aes(size=setSize, color = NES, alpha=-log10(p.adjust))) +
scale_color_gradient(low="blue", high="red") +
labs(title="GSEA_Grade_2vsPrefibrosis_Merge(Grade_0&Grade_1)") +
xlab("NES") +
ylab(NULL) +theme_bw()+
theme(plot.title = element_text(hjust = 1))
dev.off()
pdf("/Volumes/home/Data analysis/Rebekka_BMF_microvesicles-master/Limma_analysis/scripts/04_GSEA_dotplot_Cytoscape-fgsea_script_files/figure-html/Grade_2vsPre.pdf", width=5, height=5)
par(oma=c(1,1,1,10))
ggplot(myGSEA.df_1[c(60, 75, 83, 84, 86, 104, 113, 123 , 132, 237),], aes(x=NES, y=reorder(pathway_3,NES))) +
geom_point(aes(size=setSize, color = NES, alpha=-log10(p.adjust))) +
scale_color_gradient(low="blue", high="red") +
labs(title="GSEA_Grade_2vsPrefibrosis_Merge(Grade_0&Grade_1)") +
xlab("NES") +
ylab(NULL) +theme_bw()+
theme(plot.title = element_text(hjust = 1))
dev.off()
pdf("/Volumes/home/Data analysis/Rebekka_BMF_microvesicles-master/Limma_analysis/scripts/04_GSEA_dotplot_Cytoscape-fgsea_script_files/figure-html/Grade_2vsPre.pdf", width=7, height=5)
par(oma=c(1,1,1,10))
ggplot(myGSEA.df_1[c(60, 75, 83, 84, 86, 104, 113, 123 , 132, 237),], aes(x=NES, y=reorder(pathway_3,NES))) +
geom_point(aes(size=setSize, color = NES, alpha=-log10(p.adjust))) +
scale_color_gradient(low="blue", high="red") +
labs(title="GSEA_Grade_2vsPrefibrosis_Merge(Grade_0&Grade_1)") +
xlab("NES") +
ylab(NULL) +theme_bw()+
theme(plot.title = element_text(hjust = 1))
dev.off()
pdf("/Volumes/home/Data analysis/Rebekka_BMF_microvesicles-master/Limma_analysis/scripts/04_GSEA_dotplot_Cytoscape-fgsea_script_files/figure-html/Grade_2vsPre.pdf", width=10, height=5)
par(oma=c(1,1,1,10))
ggplot(myGSEA.df_1[c(60, 75, 83, 84, 86, 104, 113, 123 , 132, 237),], aes(x=NES, y=reorder(pathway_3,NES))) +
geom_point(aes(size=setSize, color = NES, alpha=-log10(p.adjust))) +
scale_color_gradient(low="blue", high="red") +
labs(title="GSEA_Grade_2vsPrefibrosis_Merge(Grade_0&Grade_1)") +
xlab("NES") +
ylab(NULL) +theme_bw()+
theme(plot.title = element_text(hjust = 1))
dev.off()
pdf("/Volumes/home/Data analysis/Rebekka_BMF_microvesicles-master/Limma_analysis/scripts/04_GSEA_dotplot_Cytoscape-fgsea_script_files/figure-html/Grade_2vsPre.pdf", width=10, height=10)
par(oma=c(1,1,1,10))
ggplot(myGSEA.df_1[c(60, 75, 83, 84, 86, 104, 113, 123 , 132, 237),], aes(x=NES, y=reorder(pathway_3,NES))) +
geom_point(aes(size=setSize, color = NES, alpha=-log10(p.adjust))) +
scale_color_gradient(low="blue", high="red") +
labs(title="GSEA_Grade_2vsPrefibrosis_Merge(Grade_0&Grade_1)") +
xlab("NES") +
ylab(NULL) +theme_bw()+
theme(plot.title = element_text(hjust = 1))
dev.off()
pdf("/Volumes/home/Data analysis/Rebekka_BMF_microvesicles-master/Limma_analysis/scripts/04_GSEA_dotplot_Cytoscape-fgsea_script_files/figure-html/Grade_2vsPre.pdf", width=10, height=10)
par(oma=c(10,10,10,10))
ggplot(myGSEA.df_1[c(60, 75, 83, 84, 86, 104, 113, 123 , 132, 237),], aes(x=NES, y=reorder(pathway_3,NES))) +
geom_point(aes(size=setSize, color = NES, alpha=-log10(p.adjust))) +
scale_color_gradient(low="blue", high="red") +
labs(title="GSEA_Grade_2vsPrefibrosis_Merge(Grade_0&Grade_1)") +
xlab("NES") +
ylab(NULL) +theme_bw()+
theme(plot.title = element_text(hjust = 1))
dev.off()
pdf("/Volumes/home/Data analysis/Rebekka_BMF_microvesicles-master/Limma_analysis/scripts/04_GSEA_dotplot_Cytoscape-fgsea_script_files/figure-html/Grade_2vsPre.pdf", width=10, height=10)
par(oma=c(10,1,10,10))
ggplot(myGSEA.df_1[c(60, 75, 83, 84, 86, 104, 113, 123 , 132, 237),], aes(x=NES, y=reorder(pathway_3,NES))) +
geom_point(aes(size=setSize, color = NES, alpha=-log10(p.adjust))) +
scale_color_gradient(low="blue", high="red") +
labs(title="GSEA_Grade_2vsPrefibrosis_Merge(Grade_0&Grade_1)") +
xlab("NES") +
ylab(NULL) +theme_bw()+
theme(plot.title = element_text(hjust = 1))
dev.off()
# create 'bubble plot' to summarize y signatures across x phenotypes
#pdf("/Volumes/home/Data analysis/Rebekka_BMF_microvesicles-master/Limma_analysis/scripts/04_GSEA_dotplot_Cytoscape-fgsea_script_files/figure-html/Grade_2vsPre.pdf", width=20, height=6)
#par(oma=c(10,1,1,10))
ggplot(myGSEA.df_1[c(60, 75, 83, 84, 86, 104, 113, 123 , 132, 237),], aes(x=NES, y=reorder(pathway_3,NES))) +
geom_point(aes(size=setSize, color = NES, alpha=-log10(p.adjust))) +
scale_color_gradient(low="blue", high="red") +
labs(title="GSEA_Grade_2vsPrefibrosis_Merge(Grade_0&Grade_1)") +
xlab("NES") +
ylab(NULL) +theme_bw()+
theme(plot.title = element_text(hjust = 1))
#dev.off()
myGSEA.df_1 <- myGSEA.df_1 %>% arrange(desc(NES))
# create 'bubble plot' to summarize y signatures across x phenotypes
#pdf("/Volumes/home/Data analysis/Rebekka_BMF_microvesicles-master/Limma_analysis/scripts/04_GSEA_dotplot_Cytoscape-fgsea_script_files/figure-html/Grade_2vsPre.pdf", width=20, height=6)
#par(oma=c(10,1,1,10))
ggplot(myGSEA.df_1[c(60, 75, 83, 84, 86, 104, 113, 123 , 132, 237),], aes(x=NES, y=reorder(pathway_3,NES))) +
geom_point(aes(size=setSize, color = NES, alpha=-log10(p.adjust))) +
scale_color_gradient(low="blue", high="red") +
labs(title="GSEA_Grade_2vsPrefibrosis_Merge(Grade_0&Grade_1)") +
xlab("NES") +
ylab(NULL) +theme_bw()+
theme(plot.title = element_text(hjust = 1))
#dev.off()
# create 'bubble plot' to summarize y signatures across x phenotypes
#pdf("/Volumes/home/Data analysis/Rebekka_BMF_microvesicles-master/Limma_analysis/scripts/04_GSEA_dotplot_Cytoscape-fgsea_script_files/figure-html/Grade_2vsPre.pdf", width=20, height=6)
#par(oma=c(10,1,1,10))
ggplot(myGSEA.df_1[c(60, 75, 83, 84, 86, 104, 113, 123 , 132, 237),], aes(x=NES, y=pathway_3,NES)) +
geom_point(aes(size=setSize, color = NES, alpha=-log10(p.adjust))) +
scale_color_gradient(low="blue", high="red") +
labs(title="GSEA_Grade_2vsPrefibrosis_Merge(Grade_0&Grade_1)") +
xlab("NES") +
ylab(NULL) +theme_bw()+
theme(plot.title = element_text(hjust = 1))
#dev.off()
View(myGSEA.df_1)
